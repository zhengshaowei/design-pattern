1、简单工厂模式
    概念：一个工厂只创建一种产品类的实例。
    适用：工厂负责创建的产品对象较少。
    特点：客户端通过传入参数（字符串或字节码），即可获取对象，无需关心创建细节。
    缺点：工厂类的职责相对过重，增加新的产品时需要修改工厂类的判断逻辑，违背开闭原则；
          不易于扩展过于复杂的产品结构。

2、工厂方法模式
    概念：指定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类，
          工厂方法让类的实例化推迟到子类中进行。
    适用：创建对象需要大量重复的代码；
          客户端（应用层）不依赖于产品类实例如何被创建、实现等细节；
          一个类通过其子类来指定创建哪个对象。
    特点：用户只需关心所需产品对应的工厂，无须关心创建细节；
          加入新产品符合开闭原则，提高了系统的可扩展性。
    缺点：类的个数容易过多，增加了代码结构的复杂度；
          增加了系统的抽象性和理解难度。
    比较：相对简单工厂模式，减轻了工厂的职责，增加了可扩展行。

3、抽象工厂模式
    概念：指提供一个创建一系列相关或相互依赖对象的接口，无须指定他们具体的类。
    适用：客户端（应用层）不依赖于产品类实例如何被创建、实现等细节；
          强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量重复的代码；
          提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现；
    特点：具体产品在应用层代码隔离，无须关心创建细节，将一个系列的产品族统一到一起创建。
    缺点：规定了所有可能被创建的产品集合，产品族中扩展新的产品困难，需要修改抽象工厂的接口，违背开闭原则；
          增加了系统的抽象性和理解难度。

    产品族与产品等级结构关系的理解：
          抽象工厂中定义了产品等级结构（功能接口规范），每个产品族继承抽象工厂类，按照抽象
          工厂中的功能接口规范实现自己工厂的具体逻辑。
          抽象工厂通过抽象的产品等级结构把多个产品族联系到一起，又相互隔离。
          客户端只需要通过抽象工厂就可以实现不同产品族及不同产品等级的产品。


